var documenterSearchIndex = {"docs":
[{"location":"manual/#Manual-1","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Short and clean instructions how to use the Package. Functions and methods can be found here with usage examples.","category":"page"},{"location":"manual/#","page":"Manual","title":"Manual","text":"Modules = [JuSwalbe]\nOrder = [:function, :type, :struct] ","category":"page"},{"location":"manual/#JuSwalbe.calc_equilibrium_distribution","page":"Manual","title":"JuSwalbe.calc_equilibrium_distribution","text":"calc_equilibrium_distribution(mom:macroquant64_1d, gravity=0)\n\nCalculates the equilibrium distributions based on the macroscopic quantities mom and gravitational acceleration gravity.\n\nThe equilibrium distribtutions are at the heart of the lattice Boltzmann method. As the expansion is made around the equilibrium, lattice Boltzmann always assumes that the flow field is close to equilibrium. Therefore the equilibrium is calculated from macroscopic quantities, i.e. height .height and velocity .velocity.\n\nMath:\n\nOne spatial dimension\n\nDefining equations in one spatial dimensions are expressed in the following way\n\nf_0^eq =  h - frac12v^2gh^2 - frac1v^2hu^2  f_1^eq =  frac14v^2gh^2 + frac12vhu + frac12v^2hu^2 f_2^eq =  frac14v^2gh^2 - frac12vhu + frac12v^2hu^2\n\nTwo spatial dimension\n\nIn two spatial dimensions the velocity because a vector with a x and y component. Such the equations look a little more complex\n\nf_0^eq =  h - frac49h(frac152gh - frac32u^2) ``fi^{eq} = wi h(\\frac{3}{2}gh + 3 \\mathbf{c}i\\cdot\\mathbf{u} + \\frac{9}{2}(\\mathbf{c}i\\cdot\\mathbf{u})^2 - \\frac{3}{2}u^2))\n\nwith i are the number of lattice speeds and wi and ci are the weights and sets of lattice velocities. \n\nExample\n\nTBD\n\nReferences\n\nOne spatial dimension\n\nThere are plenty of ways to calculate them I mainly the ones derived in Eq.(13) of Study of the 1D lattice Boltzmann shallow water equation and its coupling to build a canal network.\n\nTwo spatial dimensions\n\nHere I stick to the paper written by Paul Dellar, Eq.(26) of Nonhydrodynamic modes and a priori construction of shallow water lattice Boltzmann equations Originally these equilibria have been worked out by Paul Salmon.\n\n\n\n\n\n","category":"function"},{"location":"manual/#JuSwalbe.readinput-Tuple{Any}","page":"Manual","title":"JuSwalbe.readinput","text":"readinput(file)\n\nReads input parameters from a file.\n\nThe expected amount of parameters can be addressed with inputconstants. For now it expects seven values for different runtime constants.\n\nExample\n\njulia> using JuSwalbe, DelimitedFiles\n\njulia> args = [\"Lattice_points_x\" 10; \"Lattice_points_y\" 5; \"Max_run_time\" 1000; \"Output_dump\" 100; \"gravity\" 0.0; \"surface_tension\" 0.01; \"slippage\" 1.0] # Generate a text file with input\n7×2 Array{Any,2}:\n \"Lattice_points_x\"    10\n \"Lattice_points_y\"     5\n \"Max_run_time\"      1000\n \"Output_dump\"        100\n \"gravity\"              0.0\n \"surface_tension\"      0.01\n \"slippage\"             1.0\n\njulia> writedlm(\"test.txt\", args)\n\njulia> test = readinput(\"test.txt\")\nJuSwalbe.inputconstants(10, 5, 1000, 100, 0.0, 0.01, 1.0)\n\njulia> test.lx\n10\n\njulia> test.γ\n0.01\n\njulia> test.γ + test.δ\n1.01\n\njulia> isa(test.lx + test.gravity, Int32)\nfalse\n\njulia> rm(\"test.txt\")\n\n\n\n\n\n","category":"method"},{"location":"manual/#JuSwalbe.velocitysquared-Tuple{JuSwalbe.macroquant64_2d}","page":"Manual","title":"JuSwalbe.velocitysquared","text":"velocitysquared(mom::macroquant64_2d)\n\nComputes the square of the velocity vector (ux, uy) at every lattice point.\n\nThe magnitude of the velocity is needed to calculate the equilibrium distribution.\n\nMath\n\nThe velocity squared u^2(xy) is computed according to \n\nu^2(xy) = (u_x u_y)^2(xy) = u_x^2(xy) + u_y^2(xy)\n\nWith lower case x and y the respective component of the velocity vector is addressed.\n\nExample\n\n```jldoctest julia> using JuSwalbe\n\njulia> moment = JuSwalbe.macroquant642d(ones(4,4), JuSwalbe.velocity642d(fill(0.1, (4,4)),fill(0.2, (4,4))), zeros(4,4)) JuSwalbe.macroquant642d([1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0; 1.0 1.0 1.0 1.0], JuSwalbe.velocity642d([0.1 0.1 0.1 0.1; 0.1 0.1 0.1 0.1; 0.1 0.1 0.1 0.1; 0.1 0.1 0.1 0.1], [0.2 0.2 0.2 0.2; 0.2 0.2 0.2 0.2; 0.2 0.2 0.2 0.2; 0.2 0.2 0.2 0.2]), [0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0])\n\njulia> moment.velocity.x 4×4 Array{Float64,2}:  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1  0.1\n\njulia> velocitysquared(moment) 4×4 Array{Float64,2}:  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05  0.05\n\n\n\n\n\n","category":"method"},{"location":"manual/#JuSwalbe.inputconstants","page":"Manual","title":"JuSwalbe.inputconstants","text":"inputconstants = new(lx, ly, maxruntime, dumping, gravity, γ, δ)\n\nStruct containing input parameters.\n\nContains .lx lattice points in x-direction, .ly lattice points in y-direction.  Other fields are .maxruntime for the maximal number of time steps and .dumping to limit the number of output files. On top of these there are physical quantities such as .gravity, .γ and .δ  for the values of gravitational acceleration, fluids surface tension and the slip length. The example relates to an quadratic lattice 20 times 20 lattice units in area.  Run for 100 lattice Boltzmann time steps only printing output every 10 time steps. Having no gravity and a surface tension of 0.01 and a slip length of 1.  \n\nExample\n\njulia> using JuSwalbe\n\njulia> new_input = JuSwalbe.inputconstants(20, 20, 100, 10, 0.0, 0.01, 1.0)\nJuSwalbe.inputconstants(20, 20, 100, 10, 0.0, 0.01, 1.0)\n\njulia> new_input.γ\n0.01\n\n\n\n\n\n","category":"type"},{"location":"manual/#JuSwalbe.inputfile","page":"Manual","title":"JuSwalbe.inputfile","text":"inputfile\n\nAbstract type for all kinds of input files\n\n\n\n\n\n","category":"type"},{"location":"reference/#References-1","page":"References","title":"References","text":"","category":"section"},{"location":"#Home-1","page":"Home","title":"Home","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"JuSwalbe is a package to simulate thin film flows with a lattice Boltzmann approach. The method is introduced in the paper: Lattice Boltzmann method for thin-liquid-film hydrodynamics.","category":"page"},{"location":"devnotes/#Developer-notes-1","page":"Developer notes","title":"Developer notes","text":"","category":"section"}]
}
